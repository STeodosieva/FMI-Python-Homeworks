Second Python Homework - Arithmetic Expressions:
http://fmi.py-bg.net/tasks/2

Смятането на дълги аритметични изрази е тегава и мъчна работа. 
За щастие за такива задачи имаме компютри(които някой ден ще осъзнаят, 
че биват експлоатирани да вършат мръсната ни работа и ще въстанат срещу нас, но не това е важно сега). 
Ще се възползваме от този факт, за да улесним значително живота си.

От вас се изисква да реализирате четири функции:

    create_constant(value) - връща обект, който представлява константа
    create_variable(name) - връща обект, който представлява променлива, аргумента name указва какво да бъде името ѝ.
    create_operator(symbol, function) - връща обект, който представлява бинарен оператор. 
       symbol е символа, с който въпросния оператор се изписва, а function е функция с два аргумента, 
       която реализира изпълнението на оператора.
    create_expression(expression_structure) - връща обект, който представлява аритметичен израз. 
           expression_structure е итеруемо от итеруеми, което описва желания израз.

Изразът, който получаваме от create_expression трябва да има метод evaluate(**variables). 
Той приема keyword аргументи за стойностите на променливите в израза и връща като резултат стойността на израза при тези стойности.
Изразите трябва да имат атрибут variable_names, който е итеруемо с имената на всички променливи в израза.
Обектите ни представляващи константи, променливи и изрази трябва да могат да се събират/изваждат/умножават/делят. 
Логично, резултатът от такава операция трябва да бъде израз. Същото се отнася и за операции приложени върху литерали от езика.
Добра идея е да можем да четем изразите, които създаваме, за да можем да верифицираме какво правим. Всеки от обектите ни трябва да може да се конвертира до низ.
Всяко нещо, което има смисъл да може да се оцени, следва да може да се оцени. т.е. освен за изразите очакваме променливите и константите също да могат да се оценяват.
Ако на evaluate бъдат подадени допълнителни именовани аргументи, за които нямаме променливи, това очевидно не трябва да е проблем.
